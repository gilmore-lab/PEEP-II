{
    "contents" : "---\ntitle: \"PEEP-II-Script-Orders\"\nauthor: \"rogilmore\"\ndate: \"`r Sys.time()`\"\noutput: html_document\n---\n\nThere are four orders, with two runs in each. Sequences should start and end with a neutral prosody. \n\n```{r set-up}\n# Source libraries\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Define paths\ndir_xlsx <- 'xlsx'\ndir_csv <- 'csv'\ndir_figs <- 'figs'\n\n# Source external functions\nsource(paste('make_peep_order_fr_xlsx.R', sep=\"/\"))\n```\n\n```{r load-data}\n# Function loads .csv and turns into a data frame\n\n# Should do list-wise, but faster to do this\no1r1 <- make_peep_order_fr_xlsx(paste(dir_xlsx, 'o1r1.xlsx', sep=\"/\"), 1, 1)\no1r2 <- make_peep_order_fr_xlsx(paste(dir_xlsx, 'o1r2.xlsx', sep=\"/\"), 1, 2)\no2r1 <- make_peep_order_fr_xlsx(paste(dir_xlsx, 'o2r1.xlsx', sep=\"/\"), 2, 1)\no2r2 <- make_peep_order_fr_xlsx(paste(dir_xlsx, 'o2r2.xlsx', sep=\"/\"), 2, 2)\no3r1 <- make_peep_order_fr_xlsx(paste(dir_xlsx, 'o3r1.xlsx', sep=\"/\"), 3, 1)\no3r2 <- make_peep_order_fr_xlsx(paste(dir_xlsx, 'o3r2.xlsx', sep=\"/\"), 3, 2)\no4r1 <- make_peep_order_fr_xlsx(paste(dir_xlsx, 'o4r1.xlsx', sep=\"/\"), 4, 1)\no4r2 <- make_peep_order_fr_xlsx(paste(dir_xlsx, 'o4r2.xlsx', sep=\"/\"), 4, 2)\n\npeep_orders <- rbind(o1r1, o1r2, o2r1, o2r2, o3r1, o3r2, o4r1, o4r2 )\n\n# Make Run, Order, Stim_index a factor\npeep_orders$Run = as.factor(peep_orders$Run)\n\n```\n\nVisualize orders\n\n```{r run-order-plot}\nlibrary(ggplot2)\n\np <- ggplot(peep_orders) +\n  aes(x=Stim_index, y=Emotion, color=Emotion) + \n  geom_point()\np\n```\n\nThis seems to show that we need to normalize/recode the Happy, Angry, Neutral levels.\n\n```{r recode-levels}\nlevels(peep_orders$Emotion)\n\n# Now rename to fix\nlevels(peep_orders$Emotion) <- list(Angry = c(\"Angry\", \"Angry \"), \n                                    Happy = c(\"Happy\", \"Happy \"),\n                                    Neutral = c(\"Neu\", \"Neut\"),\n                                    Sad = c(\"Sad\"),\n                                    Silence = c(\"Sil\"))\nlevels(peep_orders$Emotion)\n```\n\nOk, so that's fixed. Let's replot by run and order.\n\n```{r run-orders-plot-v2}\np <- ggplot(peep_orders) +\n  aes(x=Stim_index, y=Emotion, \n      color=Emotion,\n      shape = Speaker) + \n  geom_point() +\n  facet_grid(Order ~ Run)\np\n```\n\nSo, we need to decide which speaker and script works for the final neutral stimulus. It looks like we start with the unfamiliar speaker for all of the initial neutral prosodies, so should we end with Mom?\n\nNow, let's look at scripts.\n\n```{r}\nwith(peep_orders, table(Emotion, Script, Speaker))\n```\n\nLooks like we only have the 1a-4a scripts assigned. Mom has too many angry 4a's and no Happy 4a's. The \"\" script will go away once we assign that last neutral stimulus. \n\nPlot to see where the problem is?\n\n```{r}\n# Split Script and Script_version\npeep_orders$Script_version <- peep_orders$Script\n\nlevels(peep_orders$Script_version) <- list(a = c(\"1a\", \"2a\", \"3a\", \"4a\"),\n                                           b = c(\"1b\", \"2b\", \"3b\", \"4b\"))\n\nlevels(peep_orders$Script) <- list('1' = c(\"1a\", \"1b\"), \n                                   '2' = c(\"2a\", \"2b\"),\n                                   '3' = c(\"3a\", \"3b\"),\n                                   '4' = c(\"4a\", \"4b\"),\n                                   '0' = c(\"None\", \"NA\", \"\"))\n```\n\nNow, we can plot scripts.\n\n```{r run-orders-plot-by-script}\np <- ggplot(peep_orders) +\n  aes(x=Stim_index, y=Emotion, \n      color = Emotion,\n      shape = Script) + \n  geom_point() +\n  facet_grid(Order ~ Run)\np\n```\n\nBy version.\n\n```{r run-orders-plot-by-version}\np <- ggplot(peep_orders) +\n  aes(x=Stim_index, y=Emotion, \n      color = Emotion,\n      shape = Script_version) + \n  geom_point() +\n  facet_grid(Order ~ Run)\np\n```\n\nOk, so it looks like order 1 uses all a, order 2 all b, and orders 3 and 4 both a and b in the a, b order. \n\n## Visualizing balance in design\n\nDo we have the same number of prosodies for each speaker within each of the four orders?\n\n```{r}\n# Here's a better way to visualize whether we are balanced by orders\npeep_filtered <- peep_orders %>%\n  filter(Emotion %in% c('Angry', 'Happy', 'Sad', 'Neutral'))\n\nxtabs( formula = ~ Speaker + Emotion + Order, data = peep_filtered, drop.unused.levels = TRUE)\n```\n\nNo.\n\nOrder 1: 1 too many Angry+Mom, one too few Happy+Mom. Neutrals ok. (added one each at end)\n\nOrder 2: Looks ok.\n\nOrder 3: One too many Angry, Happy, and Sad for Mom.\n\nOrder 4: Looks ok.",
    "created" : 1438288454882.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2195761248",
    "id" : "CCBA0F3A",
    "lastKnownWriteTime" : 1438290569,
    "path" : "~/Box Sync/b-peep-project Shared/protocols/run-orders/run-orders.Rmd",
    "project_path" : "run-orders.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_markdown"
}